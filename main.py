from aiogram import Bot, Dispatcher, types, executor
from datetime import datetime
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext, filters
from aiogram.dispatcher.filters.state import State, StatesGroup
import db
import keyboards as kb
from dotenv import load_dotenv
import os

storage = MemoryStorage()
load_dotenv()
bot = Bot(os.getenv('TOKEN'))
dp = Dispatcher(bot=bot,  storage=storage)
now = datetime.now()
dt_string = now.strftime("%d/%m/%Y %H:%M:%S")


async def on_start(_):
    await db.db_start()
    print('db started')


@dp.message_handler(commands=['start'])
async def start_bot(message: types.Message):
    await db.create_individual_table(message.chat.id, message.from_user.id)
    await message.answer_sticker('CAACAgIAAxkBAAMZZGUWOWXAyYY7LhJrZjrC7aSdn_cAAm8AA9vbfgABmVtQqHuTgHQvBA')
    await message.answer(f'–í—ñ—Ç–∞—é, {message.from_user.first_name}! –Ø –¥–æ–ø–æ–º–∞–≥–∞—Ç–∏–º—É —Ç–æ–±—ñ —Å—Ç–µ–∂–∏—Ç–∏ –∑–∞ —Ç–≤–æ—ó–º–∏ –∫–æ—à—Ç–∞–º–∏.üíµ')
    await message.answer('üíµ–ë—É–¥—å-–ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç—É:', reply_markup=kb.currency)


class UserState(StatesGroup):
    awaiting_amount = State()


class FormStatesGroup(State):
    WAITING_FOR_AMOUNT = 1
    OTHER_STATE = 2


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'uah')
async def handle_amount_request(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    await bot.send_message(
        chat_id=user_id,
        text='–í–∏ –æ–±—Ä–∞–ª–∏ UAH ‚Ç¥ (–ì—Ä–∏–≤–Ω—ñ). –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –í–∞—à –≤–∏–±—ñ—Ä.‚úÖ',
        reply_markup=kb.confirmuah
    )


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'usd')
async def handle_amount_request(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    await bot.send_message(
        chat_id=user_id,
        text='–í–∏ –æ–±—Ä–∞–ª–∏ USD $ (–î–æ–ª–∞—Ä). –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –í–∞—à –≤–∏–±—ñ—Ä.',
        reply_markup=kb.confirmusd
    )


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'no')
async def handle_amount_request(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    await bot.send_message(
        chat_id=user_id,
        text='–ë—É–¥—å-–ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç—É:',
        reply_markup=kb.currency
    )


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'yes uah')
async def handle_amount_request(callback_query: types.CallbackQuery, state: FSMContext):

    user_id = callback_query.from_user.id
    await db.inserting_currency(user_id, currency='UAH')
    await bot.send_message(
        chat_id=user_id,
        text=f'–ë—É–¥—å-–ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –í–∞—à—ñ –∫–æ—à—Ç–∏ —Å—Ç–∞–Ω–æ–º –Ω–∞ {datetime.now().strftime("%d/%m/%Y %H:%M:%S")} —É —Ç–∞–∫–æ–º—É –≤–∏–≥–ª—è–¥—ñ:  ****. **. –°—É–º—É –±—É–¥–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ –ø–æ—Ç–æ—á–Ω—ñ –∫–æ—à—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.'
    )
    await UserState.awaiting_amount.set()
    await state.update_data(user_id=user_id)


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'yes usd')
async def handle_amount_request(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    await db.inserting_currency(user_id, currency='USD')
    await bot.send_message(
        chat_id=user_id,
        text=f'–ë—É–¥—å-–ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –í–∞—à—ñ –∫–æ—à—Ç–∏ —Å—Ç–∞–Ω–æ–º –Ω–∞ {datetime.now().strftime("%d/%m/%Y %H:%M:%S")} —É —Ç–∞–∫–æ–º—É –≤–∏–≥–ª—è–¥—ñ:  ****. **. –°—É–º—É –±—É–¥–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ –ø–æ—Ç–æ—á–Ω—ñ –∫–æ—à—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. üòâ'
    )

    await UserState.awaiting_amount.set()
    await state.update_data(user_id=user_id)


@dp.message_handler(state=UserState.awaiting_amount)
async def handle_expense_amount(message: types.Message, state: FSMContext):
    try:
        amount = message.text
        if amount == '–°–∫–∞—Å—É–≤–∞—Ç–∏üö´':
            await message.answer('–í–∏ —Å–∫–∞—Å—É–≤–∞–ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—è.', reply_markup=kb.main)
            await state.finish()
            return
        data = await state.get_data()
        category = data.get("category")
        if validate_amount_format(amount):
            if category == "food":
                await db.inserting_new_food(user_id=message.from_user.id, value=amount)
            elif category == "study":
                await db.inserting_new_study(user_id=message.from_user.id, value=amount)
            elif category == "hobby":
                await db.inserting_new_hobby(user_id=message.from_user.id, value=amount)
            elif category == "travel":
                await db.inserting_new_travel(user_id=message.from_user.id, value=amount)
            elif category == "otherexpense":
                await db.inserting_new_other(user_id=message.from_user.id, value=amount)
            elif category == "house":
                await db.inserting_new_house(user_id=message.from_user.id, value=amount)
            elif category == "car":
                await db.inserting_new_car(user_id=message.from_user.id, value=amount)
            elif category == "taxi":
                await db.inserting_new_taxi(user_id=message.from_user.id, value=amount)
            elif category == "otherincome":
                await db.inserting_new_another(user_id=message.from_user.id, value=amount)
            elif category == "award":
                await db.inserting_new_award(user_id=message.from_user.id, value=amount)
            elif category == "debt":
                await db.inserting_new_debt(user_id=message.from_user.id, value=amount)
            elif category == "income":
                await db.inserting_new_income(user_id=message.from_user.id, value=amount)
            elif category == 'credit':
                await db.loan_repayment(user_id=message.from_user.id, value=amount)
                await message.reply("‚úÖ–ß–∞—Å—Ç–∏–Ω—É –±–æ—Ä–≥—É —É—Å–ø—ñ—à–Ω–æ –ø–æ–≥–∞—à–µ–Ω–æ!‚úÖ", reply_markup=kb.main)
                await state.finish()
                return
            elif category == 'creditcreate':
                await db.inserting_credit(user_id=message.from_user.id, value=amount)
                await message.reply("–ö—Ä–µ–¥–∏—Ç –±—É–ª–æ –¥–æ–¥–∞–Ω–æüòî", reply_markup=kb.main)
                await state.finish()
                return
            else:
                await db.inserting_sum_first_time(user_id=message.from_user.id, value=amount)

            await state.finish()
            await message.reply("‚úÖ–°—É–º–∞ –±—É–ª–∞ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∞!‚úÖ", reply_markup=kb.main)
        else:
            raise ValueError
    except ValueError:
        await message.reply("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–∏. –í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. ‚ùå")


@dp.message_handler(filters.Text(equals='–î–æ—Ö—ñ–¥üí∞', ignore_case=True))
async def handle_food_category(message: types.Message, state: FSMContext):
    await state.update_data(category="income")
    await UserState.awaiting_amount.set()
    await message.reply("–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É, —è–∫—É –≤–∏ –∑–∞—Ä–æ–±–∏–ª–∏(–∑–∞—Ä–ø–ª–∞—Ç–∞):", reply_markup=kb.decline)


@dp.message_handler(filters.Text(equals='–ë–æ—Ä–≥üí∏', ignore_case=True))
async def handle_food_category(message: types.Message, state: FSMContext):
    await state.update_data(category="debt")
    await UserState.awaiting_amount.set()
    await message.reply("–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É, —è–∫—É –≤–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ —É –±–æ—Ä–≥:", reply_markup=kb.decline)


@dp.message_handler(filters.Text(equals='–ü—Ä–µ–º—ñ—èü§©', ignore_case=True))
async def handle_food_category(message: types.Message, state: FSMContext):
    await state.update_data(category="award")
    await UserState.awaiting_amount.set()
    await message.reply("–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É, —è–∫–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –ø—Ä–µ–º—ñ—é:", reply_markup=kb.decline)


@dp.message_handler(filters.Text(equals='–Ü–Ω—à–∏–π –¥–æ—Ö—ñ–¥', ignore_case=True))
async def handle_food_category(message: types.Message, state: FSMContext):
    await state.update_data(category="otherincome")
    await UserState.awaiting_amount.set()
    await message.reply("–í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à–∏–π –¥–æ—Ö—ñ–¥:", reply_markup=kb.decline)


@dp.message_handler(filters.Text(equals='—ó–∂–∞üçü', ignore_case=True))
async def handle_food_category(message: types.Message, state: FSMContext):
    await state.update_data(category="food")
    await UserState.awaiting_amount.set()
    await message.reply("–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É, —è–∫—É –≤–∏ –≤–∏—Ç—Ä–∞—Ç–∏–ª–∏ –Ω–∞ —ó–∂—É:", reply_markup=kb.decline)


@dp.message_handler(filters.Text(equals='–æ—Å–≤—ñ—Ç–∞üìö', ignore_case=True))
async def handle_food_category(message: types.Message, state: FSMContext):
    await state.update_data(category="study")
    await UserState.awaiting_amount.set()
    await message.reply("–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É, —è–∫—É –≤–∏ –≤–∏—Ç—Ä–∞—Ç–∏–ª–∏ –Ω–∞ –æ—Å–≤—ñ—Ç—É:", reply_markup=kb.decline)


@dp.message_handler(filters.Text(equals='–î–æ—Å—É–≥üéØ', ignore_case=True))
async def handle_food_category(message: types.Message, state: FSMContext):
    await state.update_data(category="hobby")
    await UserState.awaiting_amount.set()
    await message.reply("–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É, —è–∫—É –≤–∏ –≤–∏—Ç—Ä–∞—Ç–∏–ª–∏ –Ω–∞ —Å–≤—ñ–π –¥–æ—Å—É–≥:", reply_markup=kb.decline)


@dp.message_handler(filters.Text(equals='–ü–æ–¥–æ—Ä–æ–∂—ñüõ´', ignore_case=True))
async def handle_food_category(message: types.Message, state: FSMContext):
    await state.update_data(category="travel")
    await UserState.awaiting_amount.set()
    await message.reply("–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É, —è–∫—É –≤–∏ –≤–∏—Ç—Ä–∞—Ç–∏–ª–∏ –Ω–∞ –ø–æ–¥–æ—Ä–æ–∂—ñ:", reply_markup=kb.decline)


@dp.message_handler(filters.Text(equals='–ö–æ–º—É–Ω–∞–ª–∫–∞(–∂–∏—Ç–ª–æ)üè†', ignore_case=True))
async def handle_food_category(message: types.Message, state: FSMContext):
    await state.update_data(category="house")
    await UserState.awaiting_amount.set()
    await message.reply("–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É, —è–∫—É –≤–∏ –≤–∏—Ç—Ä–∞—Ç–∏–ª–∏ –Ω–∞ –∫–æ–º—É–Ω–∞–ª–∫—É –∞–±–æ –∂–∏—Ç–ª–æ:", reply_markup=kb.decline)


@dp.message_handler(filters.Text(equals='–ê–≤—Ç–æüöò', ignore_case=True))
async def handle_food_category(message: types.Message, state: FSMContext):
    await state.update_data(category="car")
    await UserState.awaiting_amount.set()
    await message.reply("–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É, —è–∫—É –≤–∏ –≤–∏—Ç—Ä–∞—Ç–∏–ª–∏ –Ω–∞ —Å–≤–æ—î –∞–≤—Ç–æ:", reply_markup=kb.decline)


@dp.message_handler(filters.Text(equals='–¢–∞–∫—Å—ñüöï', ignore_case=True))
async def handle_food_category(message: types.Message, state: FSMContext):
    await state.update_data(category="taxi")
    await UserState.awaiting_amount.set()
    await message.reply("–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É, —è–∫—É –≤–∏ –≤–∏—Ç—Ä–∞—Ç–∏–ª–∏ –Ω–∞ —Ç–∞–∫—Å—ñ:", reply_markup=kb.decline)


@dp.message_handler(filters.Text(equals='–Ü–Ω—à–∞ –≤–∏—Ç—Ä–∞—Ç–∞', ignore_case=True))
async def handle_food_category(message: types.Message, state: FSMContext):
    await state.update_data(category="otherexpense")
    await UserState.awaiting_amount.set()
    await message.reply("–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É, —è–∫—É –≤–∏ –≤–∏—Ç—Ä–∞—Ç–∏–ª–∏ –Ω–∞ —â–æ—Å—å —ñ–Ω—à–µ:", reply_markup=kb.decline)


@dp.message_handler(filters.Text(equals='–ü–æ–≥–∞—Å–∏—Ç–∏üí∞', ignore_case=True))
async def handle_food_category(message: types.Message, state: FSMContext):
    await state.update_data(category="credit")
    await UserState.awaiting_amount.set()
    await message.reply("–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É, —è–∫–æ—é –í–∏ —Ö–æ—á–µ—Ç–µ –ø–æ–≥–∞—Å–∏—Ç–∏ —á–∞—Å—Ç–∏–Ω—É –∫—Ä–µ–¥–∏—Ç—É:", reply_markup=kb.decline)


@dp.message_handler(filters.Text(equals='–í–Ω–µ—Å—Ç–∏ —Ä–æ–∑–º—ñ—Ä –∫—Ä–µ–¥–∏—Ç—Éüí∏', ignore_case=True))
async def handle_food_category(message: types.Message, state: FSMContext):
    await state.update_data(category="creditcreate")
    await UserState.awaiting_amount.set()
    await message.reply("–í–≤–µ–¥—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä –í–∞—à–æ–≥–æ –∫—Ä–µ–¥–∏—Ç—É:", reply_markup=kb.decline)


@dp.message_handler(filters.Text(equals='–ö—Ä–µ–¥–∏—Ç', ignore_case=True))
async def handle_nova_vitrata(message: types.Message):
    await message.answer('–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:', reply_markup=kb.creditmenu)


@dp.message_handler(filters.Text(equals='–°—Ç–∞–Ωüìà', ignore_case=True))
async def handle_nova_vitrata(message: types.Message):
    user_id = message.from_user.id
    await message.answer(f"–í–∞–º –∑–∞–ª–∏—à–∏–ª–æ—Å—å –ø–æ–≥–∞—Å–∏—Ç–∏: {await db.get_stat_by_credit(user_id)}")


@dp.message_handler(filters.Text(equals='–Ω–æ–≤–∞ –≤–∏—Ç—Ä–∞—Ç–∞üí∏', ignore_case=True))
async def handle_nova_vitrata(message: types.Message):
    await message.answer('–ë—É–¥—å-–ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é.', reply_markup=kb.categories)


@dp.message_handler(filters.Text(equals='–±–∞–ª–∞–Ω—Åüí∞', ignore_case=True))
async def handle_nova_vitrata(message: types.Message):
    user_id = message.from_user.id
    await message.answer(f"""–ù–∞ –í–∞—à–æ–º—É —Ä–∞—Ö—É–Ω–∫—É: {await db.getting_money(user_id)} üíµ
–Ø–∫—â–æ —Ü—ñ–∫–∞–≤–æ - –æ—Å—å –í–∞—à–∞ —Å—É–º–∞ —É –¥–æ–ª–∞—Ä–∞—Ö: {await db.convert_to_usd(user_id)}üí∞
–ü–æ—Ç–æ—á–Ω–∏–π –∫—É—Ä—Å –Ω–∞ –º—ñ–Ω—Ñ—ñ–Ω—ñ —Å–∫–ª–∞–¥–∞—î {db.parser('https://minfin.com.ua/currency/usd/')}""")


@dp.message_handler(filters.Text(equals='–Ω–æ–≤–∏–π –¥–æ—Ö—ñ–¥ü§©', ignore_case=True))
async def handle_nova_vitrata(message: types.Message):
    await message.answer('–ë—É–¥—å-–ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é.', reply_markup=kb.categoriesplus)


@dp.message_handler(filters.Text(equals='—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üìà', ignore_case=True))
async def handle_nova_vitrata(message: types.Message):
    user_id = message.from_user.id
    await message.answer(f"""üìàüìàüìà –û—Å—å –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏—Ç—Ä–∞—Ç —Ç–∞ –¥–æ—Ö–æ–¥—ñ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –í–∞—à–∏—Ö –∑–∞–ø–∏—Å—ñ–≤. 
–°—É–º–∞—Ä–Ω–æ –í–∏ –≤–∏—Ç—Ä–∞—Ç–∏–ª–∏: {await db.stat_expense(user_id)}
–°—É–º–∞—Ä–Ω–æ –í–∞—à –¥–æ—Ö—ñ–¥ —Å–∫–ª–∞–¥–∞—î: {await db.stat_income(user_id)}""")


@dp.message_handler(filters.Text(equals='üëà–≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', ignore_case=True))
async def handle_nova_vitrata(message: types.Message):
    await message.answer('–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é... üëà', reply_markup=kb.main)


def validate_amount_format(amount):
    try:
        amount = float(amount.replace(",", "."))
        return round(amount, 2) == amount
    except ValueError:
        return False


if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_start, skip_updates=True)
